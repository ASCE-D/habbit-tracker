// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  goals                 Goal[]
  habits                Habit[]
   reminders             Reminder[]  
  passwordResetToken    String?   @unique
  passwordResetTokenExp DateTime?
  accounts              Account[]
  sessions              Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Goal {
  id          String   @id @default(uuid())
  title       String
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  habits      Habit[]  @relation("GoalToHabit")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Habit {
  id                      String          @id @default(uuid())
  title                   String
  description             String?
  userId                  String
  user                    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  goalId                  String?
  goal                    Goal?           @relation("GoalToHabit", fields: [goalId], references: [id], onDelete: SetNull)
  cue                     String?
  craving                 String?
  response                String?
  reward                  String?
  implementationIntention String?
  environment             String
  frequency               FrequencyType?
  intervalDays            Int? // For custom interval frequency
  goalCount               Int?
  goalPeriod              GoalPeriodType?
  timeOfDay               String? // 'any' or specific time in HH:MM format
  startDate               DateTime?
  endDate                 DateTime?
  isArchived              Boolean         @default(false)
  stackedHabitId          String?
  time                    DateTime
  stackedHabit            Habit?          @relation("HabitStack", fields: [stackedHabitId], references: [id], onDelete: SetNull)
  stackedOnto             Habit[]         @relation("HabitStack")
  trackedDays             HabitTracker[]
  obstacles               Obstacle[]
  reminders               Reminder[]      // New field
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
}

enum FrequencyType {
  DAILY
  WEEKLY
  MONTHLY
  INTERVAL
}

enum GoalPeriodType {
  DAY
  WEEK
  MONTH
}

enum HabitStatus {
  CURRENT
  COMPLETED
  SKIPPED
  FAILED
}

model HabitTracker {
  id             String       @id @default(uuid())
  habitId        String
  habit          Habit        @relation(fields: [habitId], references: [id], onDelete: Cascade)
  date           DateTime
  completedCount Int          @default(0)
  status         HabitStatus?
  notes          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  completed      Boolean

  @@unique([habitId, date])
}

model Obstacle {
  id          String   @id @default(uuid())
  description String
  solution    String
  habitId     String
  habit       Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Reminder {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  habitId   String
  habit     Habit    @relation(fields: [habitId], references: [id])
  time      DateTime
  message   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, habitId])
  @@index([time, isActive])
}